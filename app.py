# ==============================================
# üí¨ Chatbot Regulatorio Interno
# Versi√≥n completa (Excel + OpenAI + Streamlit)
# ==============================================

import os
from openai import OpenAI
import pandas as pd
import numpy as np
import nltk
from sklearn.metrics.pairwise import cosine_similarity
from nltk.corpus import stopwords
import streamlit as st
import unicodedata

def quitar_acentos(texto):
    """Elimina acentos y caracteres diacr√≠ticos de un texto."""
    return ''.join(
        c for c in unicodedata.normalize('NFD', texto)
        if unicodedata.category(c) != 'Mn'
    )

def detectar_redireccion(fragmentos):
    """Detecta si alguna respuesta del contexto indica redirecci√≥n a otro departamento."""
    palabras_clave = [
        "contacte con", "dir√≠jase a", "debe consultarlo con", "responsabilidad de",
        "departamento de", "servicio de", "autoridad competente", "rem√≠tase a",
        "redirigirse a", "consultar con", "trasladar la consulta a"
    ]
    texto_unido = " ".join(fragmentos).lower()
    return any(p in texto_unido for p in palabras_clave)

def extraer_redireccion(fragmentos):
    """Extrae el fragmento que contiene una instrucci√≥n de redirecci√≥n e identifica el departamento o responsable."""
    palabras_clave = [
        "contacte con", "dir√≠jase a", "debe consultarlo con", "responsabilidad de",
        "departamento de", "servicio de", "autoridad competente", "rem√≠tase a",
        "redirigirse a", "consultar con", "trasladar la consulta a", "deber√°s escribir un correo",
        "deber√°s enviar un correo", "correo a la direcci√≥n", "puedes contactar con",
        "escriba a", "escribir a", "env√≠e un correo", "mandar un correo"
    ]

    departamentos = [
        "internacional", "reglamentaci√≥n", "toxicolog√≠a", "formulaci√≥n",
        "medio ambiente", "jur√≠dico", "seguridad del producto",
        "autoridad competente", "asuntos cient√≠ficos", "asuntos regulatorios"
    ]

    for frag in fragmentos:
        texto = frag.lower()
        if any(p in texto for p in palabras_clave):
            # Buscar si se menciona un departamento espec√≠fico
            for palabra in departamentos:
                if palabra in texto:
                    return f"{frag.strip()} (Corresponde al departamento de {palabra.capitalize()})."

            # Buscar si hay direcci√≥n de correo
            if "@" in frag:
                return f"{frag.strip()} (Se indica una direcci√≥n de correo para contacto directo)."

            # Si no encuentra nada espec√≠fico, devuelve el fragmento original
            return frag.strip()

    return None

# ==============================================
# 1Ô∏è‚É£ CONFIGURACI√ìN INICIAL
# ==============================================

# Usa tu clave de OpenAI (debe estar guardada en una variable de entorno)
client = OpenAI(api_key=os.getenv("OPENAI_API_KEY"))

# Descargar stopwords si no est√°n instaladas
nltk.download("stopwords", quiet=True)
stop_words = stopwords.words("spanish")

# --- 1Ô∏è‚É£ Cargar el dataset ---
ruta_excel = "conversaciones_revisando.xlsx"
df = pd.read_excel(ruta_excel)

# Normalizar nombres
df.columns = df.columns.str.strip().str.lower()

# Tomar solo las consultas y respuestas
consultas = df[df["role"].str.lower() == "user"]["content"].tolist()
respuestas = df[df["role"].str.lower() == "assistant"]["content"].tolist()

# Asegurar que haya pares del mismo tama√±o
pares = list(zip(consultas, respuestas))

# ==============================================
# 2Ô∏è‚É£ CARGAR EMBEDDINGS PRECALCULADOS
# ==============================================
try:
    emb_consultas = np.load("emb_consultas_comprimido.npz")["emb"]
    print("‚úÖ Embeddings cargados correctamente.")
except FileNotFoundError:
    st.error("‚ùå No se encontr√≥ el archivo 'emb_consultas_comprimido.npz'. Genera primero los embeddings con 'generar_embeddings_excel.py'.")
    st.stop()

# ==============================================
# 4Ô∏è‚É£ Buscar contexto relevante con embeddings
# ==============================================
def buscar_contexto(pregunta, top_k=5):
    """Busca las respuestas m√°s similares sem√°nticamente."""
    pregunta_sin_acentos = quitar_acentos(pregunta.lower())
    emb_pregunta = client.embeddings.create(
        model="text-embedding-3-small",
        input=pregunta_sin_acentos
    ).data[0].embedding
    similitudes = cosine_similarity([emb_pregunta], emb_consultas)[0]
    indices = similitudes.argsort()[-top_k:][::-1]
    fragmentos = [pares[i][1] for i in indices]
    return fragmentos

FRASES_POR_TEMA = {
    "cosmetico": [
        "‚ÄúUn producto cosm√©tico, seg√∫n el Reglamento (CE) n¬∫ 1223/2009, es toda sustancia o mezcla destinada a ser puesta en contacto con las partes superficiales del cuerpo humano (epidermis, sistema piloso y capilar, u√±as, labios, √≥rganos genitales externos) o con los dientes y mucosas bucales, con el fin exclusivo o principal de limpiarlos, perfumarlos, modificar su aspecto, protegerlos, mantenerlos en buen estado o corregir los olores corporales.‚Äù"
    ],
    "cosmetica para animales" : [
        """Los productos destinados a la higiene o cuidado de animales no se consideran cosm√©ticos y quedan fuera del √°mbito de aplicaci√≥n del Reglamento 1223/2009.
            
        En el contexto espa√±ol, estos productos fueron considerados inicialmente como productos zoosanitarios. Tras la publicaci√≥n del Real Decreto 867/2020 dejaron de estar incluidos en dicho marco, aunque una sentencia del Tribunal Supremo en 2023 anul√≥ parcialmente ese Real Decreto, devolviendo temporalmente a los productos cosm√©ticos para animales la consideraci√≥n de zoosanitarios.
 
        Finalmente, con la Ley 1/2025, de 1 de abril, que modifica la Ley 8/2003 de sanidad animal, se elimina la obligatoriedad de registro de los productos de higiene, cuidado y manejo de animales (HCM) y del material y utillaje zoosanitario (MUZ). En consecuencia, estos productos quedan fuera del √°mbito competencial del Ministerio de Agricultura y Pesca.

        Ante esta situaci√≥n, el pasado mes de junio nos pusimos en contacto con ASEMAZ, quienes nos informaron de lo siguiente:Con la publicaci√≥n de la Ley 1/2025, determinados productos zoosanitarios destinados a higiene, cuidado y manejo de los animales ya no tienen que ser notificados por el titular de los mismos para su comercializaci√≥n.

        Ahora bien, decimos ‚Äúdeterminados‚Äù dado que dependiendo del ‚Äúclaim‚Äù reivindicado por el producto (biocidas), tendr√°n las siguientes obligaciones:

        **Registro nacional:**
        - Si se trata de un zoosanitario para uso en entorno ganadero (insecticida, larvicida, desinfectante, etc.), deber√° solicitarse su registro ante el MAPA como plaguicida, con los correspondientes ensayos seg√∫n la eficacia que se quiera defender. M√°s informaci√≥n: https://www.mapa.gob.es/es/ganaderia/temas/sanidad-animal-higiene-ganadera/Higiene-de-la-produccion-primaria-ganadera/registro-de-productos-zoosanitarios/
        - Si se trata de un plaguicida no agr√≠cola (desinfectante de uso en la industria alimentaria o uso ambiental, rodenticida, etc.), deber√° solicitarse su registro ante Sanidad como plaguicida no agr√≠cola. M√°s informaci√≥n: https://www.sanidad.gob.es/areas/sanidadAmbiental/biocidas/registro/regNacional/requisitos_nacional.htm
        - Si se trata de un biocida tipo 3 (higiene veterinaria con funci√≥n biocida), es obligatoria la notificaci√≥n a Sanidad de conformidad con la Disposici√≥n Transitoria Segunda del RD 1054/2002 (no requiere ensayos de eficacia). M√°s informaci√≥n: https://www.sanidad.gob.es/areas/sanidadAmbiental/biocidas/registro/regPlaguicidas/dt2notificanuevo.htm

        En todo caso, para los casos anteriores, una vez que las sustancias activas que formen parte del producto (sustancias biocidas) cuenten con Reglamento de Ejecuci√≥n para los tipos de productos biocidas que se quieren defender, esos productos deber√°n solicitar su registro por procedimiento europeo, de conformidad con las exigencias del Reglamento (UE) 528/2012.

        En todo caso, si los productos que se deseen comercializar est√©n afectados o no por lo indicado anteriormente, son productos qu√≠micos peligrosos (mezclas o sustancias) quedar√°n afectados por la normativa de clasificaci√≥n y etiquetado de mezclas y sustancias qu√≠micas, debiendo estar debidamente etiquetados, contar con ficha de datos de seguridad (FDS) y ser notificados a toxicolog√≠a a trav√©s de un expediente PCN.

        Por tanto, tal y como recomiendan desde ASEMAZ, lo m√°s conveniente es poneros en contacto con la autoridad competente correspondiente para que os puedan dar informaci√≥n detallada."""
    ]
}

# ==============================================
# üîπ RESPUESTAS DE REDIRECCI√ìN PREDEFINIDAS
# ==============================================
REDIRECCIONES_PREDEFINIDAS = {
    "internacional": {
        "palabras": ["exportar", "exportaci√≥n", "terceros pa√≠ses", "fuera de la ue",
                     "australia", "nueva zelanda", "ee.uu", "eeuu", "china", "reino unido"],
        "respuesta": """Buenos d√≠as,

    Para consultas relacionadas con terceros pa√≠ses pueden ayudaros mis compa√±eras del √°rea internacional. Lamentablemente, ellas a√∫n no tienen acceso a la plataforma de Consultas T√©cnicas, pero puedes escribirle a la direcci√≥n de correo electr√≥nico:
    **stanpainternacional@stanpa.com**

    Espero haber sido de utilidad y si necesita alguna cosa m√°s, estamos a su disposici√≥n.  
    Recibe un cordial saludo,  
    Departamento T√©cnico."""
    },
    "sostenibilidad": {
        "palabras": ["sostenibilidad", "medio ambiente", "huella", "ecodise√±o", "envase sostenible", "packaging sostenible"],
        "respuesta": """Buenos d√≠as,

        En relaci√≥n con tu consulta, lamentamos informarte que la responsable de Sostenibilidad, quien podr√≠a ayudarte, no tiene acceso a la nueva plataforma de consultas t√©cnicas. No obstante, puedes dirigirte a ella a trav√©s del siguiente correo electr√≥nico:
        **lucia.jimenez@stanpa.com**

        Espero haber sido de utilidad y si necesita alguna cosa m√°s, estamos a su disposici√≥n.  
        Recibe un cordial saludo,  
        Departamento T√©cnico."""
    }
}

# --- 5Ô∏è‚É£ Generar respuesta con GPT ---
def responder_chatbot(pregunta, mostrar_contexto=False):
    from datetime import datetime

    # --- üïí Determinar saludo seg√∫n hora ---
    hora = datetime.now().hour
    if hora < 12:
        saludo = "Buenos d√≠as,"
    else:
        saludo = "Buenas tardes,"

    # --- üßæ Despedida fija ---
    despedida = (
        "Espero haber sido de utilidad y si necesita alguna cosa m√°s, estamos a su disposici√≥n.\n"
        "Reciba un cordial saludo,\n"
        "Departamento T√©cnico."
    )

    pregunta_lower = pregunta.lower()
    pregunta_sin_acentos = quitar_acentos(pregunta_lower)

    # --- üß≠ Detecci√≥n autom√°tica de redirecciones fijas ---
    for area, datos in REDIRECCIONES_PREDEFINIDAS.items():
        if any(p in pregunta_sin_acentos for p in datos["palabras"]):
            return datos["respuesta"]

    fragmentos = buscar_contexto(pregunta)
    if not fragmentos:
        return "No encontr√© informaci√≥n relevante en la base de datos. ¬øPodr√≠as reformular la pregunta?"

    # --- üß© Detecci√≥n de redirecci√≥n ---
    if detectar_redireccion(fragmentos):
        redireccion_texto = extraer_redireccion(fragmentos)
        if redireccion_texto:
            return f"{saludo}\n\n{redireccion_texto}\n\n{despedida}"
        else:
            return (
                f"{saludo}\n\nLa consulta que plantea corresponde a otro √°mbito de competencia. "
                "Le recomendamos trasladarla al departamento o autoridad competente indicada en los procedimientos internos.\n\n"
                f"{despedida}"
            )

    contexto = "\n\n".join(fragmentos)

    # --- Detectar tema ---
    frases_relevantes = []
    for tema, frases in FRASES_POR_TEMA.items():
        if tema in pregunta_sin_acentos:
            frases_relevantes.extend(frases)
    
    # --- üß† Detecci√≥n avanzada para cosm√©tica animal ---
    palabras_clave_animales = [
        "cosmetica animal", "cosmetica para animales", "cosmeticos animales", "cosmeticos destinados a animales",
        "productos cosmeticos destinados a animales", "productos destinados a animales",
        "fabricar cosmeticos para animales", "fabricar productos cosmeticos destinados a animales",
        "fabricaci√≥n cosmetica para animales", "cosmetica veterinaria",
        "higiene animal", "cuidado animal", "cosmetica para mascotas", "productos para mascotas"
    ]

    es_cosmetica_animal = any(p in pregunta_sin_acentos for p in palabras_clave_animales)

    # Si hay menci√≥n de animales + fabricaci√≥n o declaraci√≥n -> forzar cosm√©tica animal
    if any(p in pregunta_sin_acentos for p in ["animal", "animales"]) and any(k in pregunta_sin_acentos for k in ["fabricaci√≥n", "fabricar", "declaraci√≥n responsable", "registro"]):
        es_cosmetica_animal = True

    # Si no coincide por palabra, comprobar similitud sem√°ntica con embeddings
    if not es_cosmetica_animal:
        try:
            emb_pregunta = client.embeddings.create(
                model="text-embedding-3-small",
                input=pregunta
            ).data[0].embedding

            emb_animal = client.embeddings.create(
                model="text-embedding-3-small",
                input="cosm√©tica para animales, productos cosm√©ticos destinados a animales, higiene animal, fabricaci√≥n de cosm√©ticos para animales, cosm√©tica veterinaria"
            ).data[0].embedding

            similitud = cosine_similarity([emb_pregunta], [emb_animal])[0][0]
            if similitud > 0.75:
                es_cosmetica_animal = True
        except Exception as e:
            print("‚ö†Ô∏è Error en detecci√≥n sem√°ntica de cosm√©tica animal:", e)

    if es_cosmetica_animal:
        frases_relevantes.extend(FRASES_POR_TEMA.get("cosmetica para animales", []))
    
    # --- üß© Filtrar la definici√≥n general cuando no aporta valor ---

    # Palabras clave comunes relacionadas con ingredientes o sustancias
    palabras_clave_ingredientes = [
        "formaldehido", "fenoxietanol", "metanol", "retinol", "plomo", "parabenos", "filtros uv", "filtro uv", "perfume", "fragancia",
        "conservante", "colorante", "nanomaterial", "biocida", "ingrediente", "sustancia", "compuesto", "aditivo", "alergeno"
    ]

    # Detecci√≥n inicial por palabra
    es_pregunta_de_ingrediente = any(p in pregunta_sin_acentos for p in palabras_clave_ingredientes)


    # Si no hay coincidencias claras, analizar similitud sem√°ntica
    if not es_pregunta_de_ingrediente:
        try:
            emb_pregunta = client.embeddings.create(
                model="text-embedding-3-small",
                input=pregunta
            ).data[0].embedding

            emb_ingrediente = client.embeddings.create(
                model="text-embedding-3-small",
                input="preguntas sobre ingredientes cosm√©ticos, sustancias prohibidas, conservantes, colorantes o compuestos qu√≠micos usados en cosm√©tica"
            ).data[0].embedding

            similitud_ing = cosine_similarity([emb_pregunta], [emb_ingrediente])[0][0]
            if similitud_ing > 0.75:
                es_pregunta_de_ingrediente = True
        except Exception as e:
            print("‚ö†Ô∏è Error en detecci√≥n sem√°ntica de ingredientes:", e)

    # Si la pregunta trata de ingredientes, eliminar la definici√≥n general del cosm√©tico
    if es_pregunta_de_ingrediente and "cosmetico" in FRASES_POR_TEMA:
        frases_relevantes = [
            f for f in frases_relevantes
            if f not in FRASES_POR_TEMA["cosmetico"]
        ]

    # Si el tema detectado es cosm√©tica animal, unir todas las frases en una sola para asegurar que el bloque completo se incluye
    frases_texto = "\n".join([f"- {f}" for f in frases_relevantes]) if frases_relevantes else ""

    if es_cosmetica_animal:
        frases_texto = "\n".join(["- " + " ".join(FRASES_POR_TEMA.get("cosmetica para animales", []))])

    prompt = f"""
    Eres un asistente experto en legislaci√≥n cosm√©tica, biocidas y productos regulados.

    Debes redactar una respuesta **formal, precisa y actualizada**, en tono t√©cnico.
    Estructura la respuesta de la siguiente forma:

    1Ô∏è‚É£ Comienza con una **afirmaci√≥n clara y objetiva** sobre la situaci√≥n normativa del tema preguntado.
    2Ô∏è‚É£ Desarrolla a continuaci√≥n una explicaci√≥n completa con el contexto legal y t√©cnico.
    3Ô∏è‚É£ Finaliza con la despedida establecida.

    La respuesta debe empezar con un saludo (‚ÄúBuenos d√≠as,‚Äù / ‚ÄúBuenas tardes,‚Äù) y finalizar con:

    "Espero haber sido de utilidad y si necesita alguna cosa m√°s, estamos a su disposici√≥n.
    Reciba un cordial saludo,
    Departamento T√©cnico."

    ‚öñÔ∏è Instrucciones:
    - No inventes ni reformules informaci√≥n.
    - No incluyas recomendaciones ni valoraciones personales.
    - **Debes incluir en la respuesta todas las frases normativas listadas a continuaci√≥n, sin omitir ninguna parte, sin resumir ni reescribirlas.**
    - Cada una de ellas debe aparecer *exactamente como est√° redactada* (sin comillas), en cursiva, dentro del texto final:
    {frases_texto}
    - **Mant√©n la estructura y el formato t√©cnico** de la informaci√≥n (por ejemplo, listas con guiones, subt√≠tulos en negrita como ‚ÄúRegistro nacional‚Äù, saltos de l√≠nea, etc.).
    - Si la informaci√≥n incluye secciones con guiones o subt√≠tulos, reprod√∫celas con formato Markdown igual al original.
    - No transformes las listas en p√°rrafos corridos.

    - Inserta las frases donde encajen naturalmente en el desarrollo.
    - El resto del texto debe complementar las frases con explicaciones objetivas y actuales.

    ---
    Contexto normativo (solo para ampliar datos coherentes con las frases anteriores):
    {contexto}

    ---
    Pregunta:
    {pregunta}
    """
    prompt += "\n\nRecuerda: conserva la estructura original (listas, t√≠tulos y saltos de l√≠nea) del texto normativo."

    # --- üîó Llamada al modelo ---
    respuesta = client.chat.completions.create(
        model="gpt-4o-mini",
        messages=[{"role": "user", "content": prompt}],
        temperature=0.1
    ).choices[0].message.content.strip()

    # --- üß© Evitar duplicados ---
    respuesta_limpia = respuesta.strip()

    if not respuesta_limpia.lower().startswith(("buenos d√≠as", "buenas tardes", "buenas noches")):
        respuesta_limpia = f"{saludo}\n\n{respuesta_limpia}"

    despedida_normalizada = despedida.lower().replace("\n", " ").replace("  ", " ").strip()
    respuesta_normalizada = respuesta_limpia.lower().replace("\n", " ").replace("  ", " ").strip()
    if "departamento t√©cnico" not in respuesta_normalizada:
        respuesta_limpia = f"{respuesta_limpia}\n\n{despedida}"

    # --- ‚ú® Poner en cursiva las frases normativas incluidas ---
    for tema, frases in FRASES_POR_TEMA.items():
        for frase in frases:
            frase_limpia = frase.strip("‚Äú‚Äù\"'")
            if frase_limpia in respuesta_limpia:
                respuesta_limpia = respuesta_limpia.replace(frase_limpia, f"*{frase_limpia}*")

    return respuesta_limpia

# ==============================================
# 5Ô∏è‚É£ INTERFAZ STREAMLIT
# ==============================================
st.title("üí¨ Chatbot Regulatorio Interno")
st.write("Escribe tu consulta relacionada con normativa cosm√©tica o procedimientos t√©cnicos.")

pregunta = st.text_area("üß¥ Tu consulta:")
if st.button("Enviar"):
    if pregunta.strip():
        with st.spinner("Analizando consulta..."):
            respuesta = responder_chatbot(pregunta)
            respuesta = respuesta.replace("\n", "<br>")  # üëà convierte saltos en HTML
        st.markdown(f"<div style='font-size:16px; line-height:1.6;'>{respuesta}</div>", unsafe_allow_html=True)
    else:
        st.warning("Por favor, escribe una consulta antes de enviar.")

st.markdown("---")
st.caption("üß† Basado en el hist√≥rico de consultas internas y el modelo GPT-4o de OpenAI.")
